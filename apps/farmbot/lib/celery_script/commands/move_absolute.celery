@doc """
  move_absolute:
    args: %{location: "coordinate",
            offset: "coordinate",
            speed: integer}
    body: []
"""
@spec move_absolute(%{location: coordinate | tool,
  offset: coordinate,
  speed: integer}, []) :: no_return
def move_absolute(
  %{location: %Ast{kind: "coordinate", args: %{x: x, y: y, z: z}, body: []},
    offset:  %Ast{kind: "coordinate", args: %{x: xa, y: ya, z: za}, body: []},
    speed: s}, [])
do
  GcodeHandler.block_send("G00 X#{x + xa} Y#{y + ya} Z#{z + za} S#{s}")
end

def move_absolute(
  %{location: %Ast{kind: "coordinate", args: %{x: x, y: y, z: z}, body: []},
    offset:   %Ast{kind: "nothing", args: %{}, body: []},
    speed: s}, [])
do
  GcodeHandler.block_send("G00 X#{x} Y#{y} Z#{z} S#{s}")
end

# we want to move to the location of a tool
# so we get the tool from this node
# find its location (tool_slot)
# then turn that location into a coordinate, and move
# to that coord.
def move_absolute(
  %{location: %Ast{kind: "tool",
                   args: %{tool_id: _id} = tool_args,
                   body: [] = tool_body},
    offset:   offset,
    speed: s}, [])
do
  # get the tool from the db
  case tool(tool_args, tool_body) do
    nil ->
      Logger.error ">> failed to find tool!"
      {:error, :no_tool}
    %Tool{} = t ->
      # tool -> toolslot -> coordinate
      coord = get_slot_from_tool(t)
      move_absolute(%{location: coord, offset: offset, speed: s}, @nobod)
  end
end
